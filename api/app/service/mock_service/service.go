// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/eyalk/Development/go-workspace/src/github.com/eyalkenig/meizam-api/api/app/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "github.com/eyalkenig/meizam-api/api/app/repository/mysql/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method
func (m *MockService) CreateTeam(teamName string, externalEntityId, imageUrl *string) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", teamName, externalEntityId, imageUrl)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockServiceMockRecorder) CreateTeam(teamName, externalEntityId, imageUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockService)(nil).CreateTeam), teamName, externalEntityId, imageUrl)
}

// CreateCompetition mocks base method
func (m *MockService) CreateCompetition(name, competitionType string, externalEntityId *string) (*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompetition", name, competitionType, externalEntityId)
	ret0, _ := ret[0].(*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompetition indicates an expected call of CreateCompetition
func (mr *MockServiceMockRecorder) CreateCompetition(name, competitionType, externalEntityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetition", reflect.TypeOf((*MockService)(nil).CreateCompetition), name, competitionType, externalEntityId)
}

// ListTeams mocks base method
func (m *MockService) ListTeams(limit, offset int) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", limit, offset)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockServiceMockRecorder) ListTeams(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockService)(nil).ListTeams), limit, offset)
}

// ListCompetitions mocks base method
func (m *MockService) ListCompetitions(limit, offset int) ([]*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompetitions", limit, offset)
	ret0, _ := ret[0].([]*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompetitions indicates an expected call of ListCompetitions
func (mr *MockServiceMockRecorder) ListCompetitions(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompetitions", reflect.TypeOf((*MockService)(nil).ListCompetitions), limit, offset)
}

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method
func (m *MockCommand) CreateTeam(teamName string, externalEntityId, imageUrl *string) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", teamName, externalEntityId, imageUrl)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockCommandMockRecorder) CreateTeam(teamName, externalEntityId, imageUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockCommand)(nil).CreateTeam), teamName, externalEntityId, imageUrl)
}

// CreateCompetition mocks base method
func (m *MockCommand) CreateCompetition(name, competitionType string, externalEntityId *string) (*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompetition", name, competitionType, externalEntityId)
	ret0, _ := ret[0].(*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompetition indicates an expected call of CreateCompetition
func (mr *MockCommandMockRecorder) CreateCompetition(name, competitionType, externalEntityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetition", reflect.TypeOf((*MockCommand)(nil).CreateCompetition), name, competitionType, externalEntityId)
}

// MockQuery is a mock of Query interface
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// ListTeams mocks base method
func (m *MockQuery) ListTeams(limit, offset int) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", limit, offset)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockQueryMockRecorder) ListTeams(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockQuery)(nil).ListTeams), limit, offset)
}

// ListCompetitions mocks base method
func (m *MockQuery) ListCompetitions(limit, offset int) ([]*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompetitions", limit, offset)
	ret0, _ := ret[0].([]*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompetitions indicates an expected call of ListCompetitions
func (mr *MockQueryMockRecorder) ListCompetitions(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompetitions", reflect.TypeOf((*MockQuery)(nil).ListCompetitions), limit, offset)
}
