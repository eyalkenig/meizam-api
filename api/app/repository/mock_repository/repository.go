// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/eyalk/Development/go-workspace/src/github.com/eyalkenig/meizam-api/api/app/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "github.com/eyalkenig/meizam-api/api/app/repository/mysql/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method
func (m *MockRepository) CreateTeam(teamName string, externalEntityId, imageUrl *string) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", teamName, externalEntityId, imageUrl)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockRepositoryMockRecorder) CreateTeam(teamName, externalEntityId, imageUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockRepository)(nil).CreateTeam), teamName, externalEntityId, imageUrl)
}

// CreateCompetition mocks base method
func (m *MockRepository) CreateCompetition(name, competitionType string, externalEntityId *string) (*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompetition", name, competitionType, externalEntityId)
	ret0, _ := ret[0].(*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompetition indicates an expected call of CreateCompetition
func (mr *MockRepositoryMockRecorder) CreateCompetition(name, competitionType, externalEntityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetition", reflect.TypeOf((*MockRepository)(nil).CreateCompetition), name, competitionType, externalEntityId)
}

// ListTeams mocks base method
func (m *MockRepository) ListTeams(limit, offset int) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", limit, offset)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockRepositoryMockRecorder) ListTeams(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockRepository)(nil).ListTeams), limit, offset)
}

// ListCompetitions mocks base method
func (m *MockRepository) ListCompetitions(limit, offset int) ([]*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompetitions", limit, offset)
	ret0, _ := ret[0].([]*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompetitions indicates an expected call of ListCompetitions
func (mr *MockRepositoryMockRecorder) ListCompetitions(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompetitions", reflect.TypeOf((*MockRepository)(nil).ListCompetitions), limit, offset)
}

// MockrealWorldRepository is a mock of realWorldRepository interface
type MockrealWorldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockrealWorldRepositoryMockRecorder
}

// MockrealWorldRepositoryMockRecorder is the mock recorder for MockrealWorldRepository
type MockrealWorldRepositoryMockRecorder struct {
	mock *MockrealWorldRepository
}

// NewMockrealWorldRepository creates a new mock instance
func NewMockrealWorldRepository(ctrl *gomock.Controller) *MockrealWorldRepository {
	mock := &MockrealWorldRepository{ctrl: ctrl}
	mock.recorder = &MockrealWorldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrealWorldRepository) EXPECT() *MockrealWorldRepositoryMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method
func (m *MockrealWorldRepository) CreateTeam(teamName string, externalEntityId, imageUrl *string) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", teamName, externalEntityId, imageUrl)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockrealWorldRepositoryMockRecorder) CreateTeam(teamName, externalEntityId, imageUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockrealWorldRepository)(nil).CreateTeam), teamName, externalEntityId, imageUrl)
}

// CreateCompetition mocks base method
func (m *MockrealWorldRepository) CreateCompetition(name, competitionType string, externalEntityId *string) (*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompetition", name, competitionType, externalEntityId)
	ret0, _ := ret[0].(*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompetition indicates an expected call of CreateCompetition
func (mr *MockrealWorldRepositoryMockRecorder) CreateCompetition(name, competitionType, externalEntityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompetition", reflect.TypeOf((*MockrealWorldRepository)(nil).CreateCompetition), name, competitionType, externalEntityId)
}

// ListTeams mocks base method
func (m *MockrealWorldRepository) ListTeams(limit, offset int) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", limit, offset)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams
func (mr *MockrealWorldRepositoryMockRecorder) ListTeams(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockrealWorldRepository)(nil).ListTeams), limit, offset)
}

// ListCompetitions mocks base method
func (m *MockrealWorldRepository) ListCompetitions(limit, offset int) ([]*models.Competition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompetitions", limit, offset)
	ret0, _ := ret[0].([]*models.Competition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompetitions indicates an expected call of ListCompetitions
func (mr *MockrealWorldRepositoryMockRecorder) ListCompetitions(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompetitions", reflect.TypeOf((*MockrealWorldRepository)(nil).ListCompetitions), limit, offset)
}
