// Automatically generated by MockGen. DO NOT EDIT!
// Source: /Users/eyalkenig/Development/yotpo-workspace/yotpo-go-workspace/src/github.com/eyalkenig/meizam-api/api/app/repository/repository.go

package mock_repository

import (
	models "github.com/eyalkenig/meizam-api/api/app/repository/mysql/models"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) CreateTeam(teamName string, externalEntityId *string, imageUrl *string) (*models.Team, error) {
	ret := _m.ctrl.Call(_m, "CreateTeam", teamName, externalEntityId, imageUrl)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) CreateTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTeam", arg0, arg1, arg2)
}

func (_m *MockRepository) ListTeams(limit int, offset int) ([]*models.Team, error) {
	ret := _m.ctrl.Call(_m, "ListTeams", limit, offset)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) ListTeams(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTeams", arg0, arg1)
}

// Mock of realWorldRepository interface
type MockrealWorldRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockrealWorldRepositoryRecorder
}

// Recorder for MockrealWorldRepository (not exported)
type _MockrealWorldRepositoryRecorder struct {
	mock *MockrealWorldRepository
}

func NewMockrealWorldRepository(ctrl *gomock.Controller) *MockrealWorldRepository {
	mock := &MockrealWorldRepository{ctrl: ctrl}
	mock.recorder = &_MockrealWorldRepositoryRecorder{mock}
	return mock
}

func (_m *MockrealWorldRepository) EXPECT() *_MockrealWorldRepositoryRecorder {
	return _m.recorder
}

func (_m *MockrealWorldRepository) CreateTeam(teamName string, externalEntityId *string, imageUrl *string) (*models.Team, error) {
	ret := _m.ctrl.Call(_m, "CreateTeam", teamName, externalEntityId, imageUrl)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockrealWorldRepositoryRecorder) CreateTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTeam", arg0, arg1, arg2)
}

func (_m *MockrealWorldRepository) ListTeams(limit int, offset int) ([]*models.Team, error) {
	ret := _m.ctrl.Call(_m, "ListTeams", limit, offset)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockrealWorldRepositoryRecorder) ListTeams(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTeams", arg0, arg1)
}
