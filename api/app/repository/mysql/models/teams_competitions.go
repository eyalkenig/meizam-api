// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TeamsCompetition is an object representing the database table.
type TeamsCompetition struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamID           int       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	CompetitionID    int       `boil:"competition_id" json:"competition_id" toml:"competition_id" yaml:"competition_id"`
	ExternalEntityID null.Int  `boil:"external_entity_id" json:"external_entity_id,omitempty" toml:"external_entity_id" yaml:"external_entity_id,omitempty"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *teamsCompetitionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamsCompetitionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamsCompetitionColumns = struct {
	ID               string
	TeamID           string
	CompetitionID    string
	ExternalEntityID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	TeamID:           "team_id",
	CompetitionID:    "competition_id",
	ExternalEntityID: "external_entity_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// Generated where

var TeamsCompetitionWhere = struct {
	ID               whereHelperint
	TeamID           whereHelperint
	CompetitionID    whereHelperint
	ExternalEntityID whereHelpernull_Int
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: `id`},
	TeamID:           whereHelperint{field: `team_id`},
	CompetitionID:    whereHelperint{field: `competition_id`},
	ExternalEntityID: whereHelpernull_Int{field: `external_entity_id`},
	CreatedAt:        whereHelpernull_Time{field: `created_at`},
	UpdatedAt:        whereHelpernull_Time{field: `updated_at`},
}

// TeamsCompetitionRels is where relationship names are stored.
var TeamsCompetitionRels = struct {
}{}

// teamsCompetitionR is where relationships are stored.
type teamsCompetitionR struct {
}

// NewStruct creates a new relationship struct
func (*teamsCompetitionR) NewStruct() *teamsCompetitionR {
	return &teamsCompetitionR{}
}

// teamsCompetitionL is where Load methods for each relationship are stored.
type teamsCompetitionL struct{}

var (
	teamsCompetitionColumns               = []string{"id", "team_id", "competition_id", "external_entity_id", "created_at", "updated_at"}
	teamsCompetitionColumnsWithoutDefault = []string{"team_id", "competition_id", "external_entity_id", "created_at", "updated_at"}
	teamsCompetitionColumnsWithDefault    = []string{"id"}
	teamsCompetitionPrimaryKeyColumns     = []string{"id"}
)

type (
	// TeamsCompetitionSlice is an alias for a slice of pointers to TeamsCompetition.
	// This should generally be used opposed to []TeamsCompetition.
	TeamsCompetitionSlice []*TeamsCompetition
	// TeamsCompetitionHook is the signature for custom TeamsCompetition hook methods
	TeamsCompetitionHook func(context.Context, boil.ContextExecutor, *TeamsCompetition) error

	teamsCompetitionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamsCompetitionType                 = reflect.TypeOf(&TeamsCompetition{})
	teamsCompetitionMapping              = queries.MakeStructMapping(teamsCompetitionType)
	teamsCompetitionPrimaryKeyMapping, _ = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, teamsCompetitionPrimaryKeyColumns)
	teamsCompetitionInsertCacheMut       sync.RWMutex
	teamsCompetitionInsertCache          = make(map[string]insertCache)
	teamsCompetitionUpdateCacheMut       sync.RWMutex
	teamsCompetitionUpdateCache          = make(map[string]updateCache)
	teamsCompetitionUpsertCacheMut       sync.RWMutex
	teamsCompetitionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamsCompetitionBeforeInsertHooks []TeamsCompetitionHook
var teamsCompetitionBeforeUpdateHooks []TeamsCompetitionHook
var teamsCompetitionBeforeDeleteHooks []TeamsCompetitionHook
var teamsCompetitionBeforeUpsertHooks []TeamsCompetitionHook

var teamsCompetitionAfterInsertHooks []TeamsCompetitionHook
var teamsCompetitionAfterSelectHooks []TeamsCompetitionHook
var teamsCompetitionAfterUpdateHooks []TeamsCompetitionHook
var teamsCompetitionAfterDeleteHooks []TeamsCompetitionHook
var teamsCompetitionAfterUpsertHooks []TeamsCompetitionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamsCompetition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamsCompetition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamsCompetition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamsCompetition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamsCompetition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamsCompetition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamsCompetition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamsCompetition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamsCompetition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsCompetitionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamsCompetitionHook registers your hook function for all future operations.
func AddTeamsCompetitionHook(hookPoint boil.HookPoint, teamsCompetitionHook TeamsCompetitionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teamsCompetitionBeforeInsertHooks = append(teamsCompetitionBeforeInsertHooks, teamsCompetitionHook)
	case boil.BeforeUpdateHook:
		teamsCompetitionBeforeUpdateHooks = append(teamsCompetitionBeforeUpdateHooks, teamsCompetitionHook)
	case boil.BeforeDeleteHook:
		teamsCompetitionBeforeDeleteHooks = append(teamsCompetitionBeforeDeleteHooks, teamsCompetitionHook)
	case boil.BeforeUpsertHook:
		teamsCompetitionBeforeUpsertHooks = append(teamsCompetitionBeforeUpsertHooks, teamsCompetitionHook)
	case boil.AfterInsertHook:
		teamsCompetitionAfterInsertHooks = append(teamsCompetitionAfterInsertHooks, teamsCompetitionHook)
	case boil.AfterSelectHook:
		teamsCompetitionAfterSelectHooks = append(teamsCompetitionAfterSelectHooks, teamsCompetitionHook)
	case boil.AfterUpdateHook:
		teamsCompetitionAfterUpdateHooks = append(teamsCompetitionAfterUpdateHooks, teamsCompetitionHook)
	case boil.AfterDeleteHook:
		teamsCompetitionAfterDeleteHooks = append(teamsCompetitionAfterDeleteHooks, teamsCompetitionHook)
	case boil.AfterUpsertHook:
		teamsCompetitionAfterUpsertHooks = append(teamsCompetitionAfterUpsertHooks, teamsCompetitionHook)
	}
}

// One returns a single teamsCompetition record from the query.
func (q teamsCompetitionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TeamsCompetition, error) {
	o := &TeamsCompetition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for teams_competitions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamsCompetition records from the query.
func (q teamsCompetitionQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamsCompetitionSlice, error) {
	var o []*TeamsCompetition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TeamsCompetition slice")
	}

	if len(teamsCompetitionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamsCompetition records in the query.
func (q teamsCompetitionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count teams_competitions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamsCompetitionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if teams_competitions exists")
	}

	return count > 0, nil
}

// TeamsCompetitions retrieves all the records using an executor.
func TeamsCompetitions(mods ...qm.QueryMod) teamsCompetitionQuery {
	mods = append(mods, qm.From("`teams_competitions`"))
	return teamsCompetitionQuery{NewQuery(mods...)}
}

// FindTeamsCompetition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamsCompetition(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TeamsCompetition, error) {
	teamsCompetitionObj := &TeamsCompetition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `teams_competitions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, teamsCompetitionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from teams_competitions")
	}

	return teamsCompetitionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamsCompetition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no teams_competitions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamsCompetitionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamsCompetitionInsertCacheMut.RLock()
	cache, cached := teamsCompetitionInsertCache[key]
	teamsCompetitionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamsCompetitionColumns,
			teamsCompetitionColumnsWithDefault,
			teamsCompetitionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `teams_competitions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `teams_competitions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `teams_competitions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, teamsCompetitionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into teams_competitions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == teamsCompetitionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for teams_competitions")
	}

CacheNoHooks:
	if !cached {
		teamsCompetitionInsertCacheMut.Lock()
		teamsCompetitionInsertCache[key] = cache
		teamsCompetitionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TeamsCompetition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamsCompetition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamsCompetitionUpdateCacheMut.RLock()
	cache, cached := teamsCompetitionUpdateCache[key]
	teamsCompetitionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamsCompetitionColumns,
			teamsCompetitionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update teams_competitions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `teams_competitions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, teamsCompetitionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, append(wl, teamsCompetitionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update teams_competitions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for teams_competitions")
	}

	if !cached {
		teamsCompetitionUpdateCacheMut.Lock()
		teamsCompetitionUpdateCache[key] = cache
		teamsCompetitionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamsCompetitionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for teams_competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for teams_competitions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamsCompetitionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamsCompetitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `teams_competitions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamsCompetitionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in teamsCompetition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all teamsCompetition")
	}
	return rowsAff, nil
}

var mySQLTeamsCompetitionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamsCompetition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no teams_competitions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamsCompetitionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTeamsCompetitionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamsCompetitionUpsertCacheMut.RLock()
	cache, cached := teamsCompetitionUpsertCache[key]
	teamsCompetitionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamsCompetitionColumns,
			teamsCompetitionColumnsWithDefault,
			teamsCompetitionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamsCompetitionColumns,
			teamsCompetitionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert teams_competitions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "teams_competitions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `teams_competitions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for teams_competitions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == teamsCompetitionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(teamsCompetitionType, teamsCompetitionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for teams_competitions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for teams_competitions")
	}

CacheNoHooks:
	if !cached {
		teamsCompetitionUpsertCacheMut.Lock()
		teamsCompetitionUpsertCache[key] = cache
		teamsCompetitionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TeamsCompetition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamsCompetition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TeamsCompetition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamsCompetitionPrimaryKeyMapping)
	sql := "DELETE FROM `teams_competitions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from teams_competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for teams_competitions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamsCompetitionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no teamsCompetitionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from teams_competitions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for teams_competitions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamsCompetitionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TeamsCompetition slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(teamsCompetitionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamsCompetitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `teams_competitions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamsCompetitionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from teamsCompetition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for teams_competitions")
	}

	if len(teamsCompetitionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamsCompetition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeamsCompetition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamsCompetitionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamsCompetitionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamsCompetitionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `teams_competitions`.* FROM `teams_competitions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamsCompetitionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeamsCompetitionSlice")
	}

	*o = slice

	return nil
}

// TeamsCompetitionExists checks if the TeamsCompetition row exists.
func TeamsCompetitionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `teams_competitions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if teams_competitions exists")
	}

	return exists, nil
}
