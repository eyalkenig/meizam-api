// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExternalEntity is an object representing the database table.
type ExternalEntity struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntityType       string    `boil:"entity_type" json:"entity_type" toml:"entity_type" yaml:"entity_type"`
	VendorID         int       `boil:"vendor_id" json:"vendor_id" toml:"vendor_id" yaml:"vendor_id"`
	VendorExternalID string    `boil:"vendor_external_id" json:"vendor_external_id" toml:"vendor_external_id" yaml:"vendor_external_id"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *externalEntityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L externalEntityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExternalEntityColumns = struct {
	ID               string
	EntityType       string
	VendorID         string
	VendorExternalID string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	EntityType:       "entity_type",
	VendorID:         "vendor_id",
	VendorExternalID: "vendor_external_id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// Generated where

var ExternalEntityWhere = struct {
	ID               whereHelperint
	EntityType       whereHelperstring
	VendorID         whereHelperint
	VendorExternalID whereHelperstring
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint{field: `id`},
	EntityType:       whereHelperstring{field: `entity_type`},
	VendorID:         whereHelperint{field: `vendor_id`},
	VendorExternalID: whereHelperstring{field: `vendor_external_id`},
	CreatedAt:        whereHelpernull_Time{field: `created_at`},
	UpdatedAt:        whereHelpernull_Time{field: `updated_at`},
}

// ExternalEntityRels is where relationship names are stored.
var ExternalEntityRels = struct {
}{}

// externalEntityR is where relationships are stored.
type externalEntityR struct {
}

// NewStruct creates a new relationship struct
func (*externalEntityR) NewStruct() *externalEntityR {
	return &externalEntityR{}
}

// externalEntityL is where Load methods for each relationship are stored.
type externalEntityL struct{}

var (
	externalEntityColumns               = []string{"id", "entity_type", "vendor_id", "vendor_external_id", "created_at", "updated_at"}
	externalEntityColumnsWithoutDefault = []string{"entity_type", "vendor_id", "vendor_external_id", "created_at", "updated_at"}
	externalEntityColumnsWithDefault    = []string{"id"}
	externalEntityPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExternalEntitySlice is an alias for a slice of pointers to ExternalEntity.
	// This should generally be used opposed to []ExternalEntity.
	ExternalEntitySlice []*ExternalEntity
	// ExternalEntityHook is the signature for custom ExternalEntity hook methods
	ExternalEntityHook func(context.Context, boil.ContextExecutor, *ExternalEntity) error

	externalEntityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	externalEntityType                 = reflect.TypeOf(&ExternalEntity{})
	externalEntityMapping              = queries.MakeStructMapping(externalEntityType)
	externalEntityPrimaryKeyMapping, _ = queries.BindMapping(externalEntityType, externalEntityMapping, externalEntityPrimaryKeyColumns)
	externalEntityInsertCacheMut       sync.RWMutex
	externalEntityInsertCache          = make(map[string]insertCache)
	externalEntityUpdateCacheMut       sync.RWMutex
	externalEntityUpdateCache          = make(map[string]updateCache)
	externalEntityUpsertCacheMut       sync.RWMutex
	externalEntityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var externalEntityBeforeInsertHooks []ExternalEntityHook
var externalEntityBeforeUpdateHooks []ExternalEntityHook
var externalEntityBeforeDeleteHooks []ExternalEntityHook
var externalEntityBeforeUpsertHooks []ExternalEntityHook

var externalEntityAfterInsertHooks []ExternalEntityHook
var externalEntityAfterSelectHooks []ExternalEntityHook
var externalEntityAfterUpdateHooks []ExternalEntityHook
var externalEntityAfterDeleteHooks []ExternalEntityHook
var externalEntityAfterUpsertHooks []ExternalEntityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExternalEntity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExternalEntity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExternalEntity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExternalEntity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExternalEntity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExternalEntity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExternalEntity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExternalEntity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExternalEntity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range externalEntityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExternalEntityHook registers your hook function for all future operations.
func AddExternalEntityHook(hookPoint boil.HookPoint, externalEntityHook ExternalEntityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		externalEntityBeforeInsertHooks = append(externalEntityBeforeInsertHooks, externalEntityHook)
	case boil.BeforeUpdateHook:
		externalEntityBeforeUpdateHooks = append(externalEntityBeforeUpdateHooks, externalEntityHook)
	case boil.BeforeDeleteHook:
		externalEntityBeforeDeleteHooks = append(externalEntityBeforeDeleteHooks, externalEntityHook)
	case boil.BeforeUpsertHook:
		externalEntityBeforeUpsertHooks = append(externalEntityBeforeUpsertHooks, externalEntityHook)
	case boil.AfterInsertHook:
		externalEntityAfterInsertHooks = append(externalEntityAfterInsertHooks, externalEntityHook)
	case boil.AfterSelectHook:
		externalEntityAfterSelectHooks = append(externalEntityAfterSelectHooks, externalEntityHook)
	case boil.AfterUpdateHook:
		externalEntityAfterUpdateHooks = append(externalEntityAfterUpdateHooks, externalEntityHook)
	case boil.AfterDeleteHook:
		externalEntityAfterDeleteHooks = append(externalEntityAfterDeleteHooks, externalEntityHook)
	case boil.AfterUpsertHook:
		externalEntityAfterUpsertHooks = append(externalEntityAfterUpsertHooks, externalEntityHook)
	}
}

// One returns a single externalEntity record from the query.
func (q externalEntityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExternalEntity, error) {
	o := &ExternalEntity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for external_entities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExternalEntity records from the query.
func (q externalEntityQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExternalEntitySlice, error) {
	var o []*ExternalEntity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExternalEntity slice")
	}

	if len(externalEntityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExternalEntity records in the query.
func (q externalEntityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count external_entities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q externalEntityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if external_entities exists")
	}

	return count > 0, nil
}

// ExternalEntities retrieves all the records using an executor.
func ExternalEntities(mods ...qm.QueryMod) externalEntityQuery {
	mods = append(mods, qm.From("`external_entities`"))
	return externalEntityQuery{NewQuery(mods...)}
}

// FindExternalEntity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExternalEntity(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ExternalEntity, error) {
	externalEntityObj := &ExternalEntity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `external_entities` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, externalEntityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from external_entities")
	}

	return externalEntityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExternalEntity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no external_entities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(externalEntityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	externalEntityInsertCacheMut.RLock()
	cache, cached := externalEntityInsertCache[key]
	externalEntityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			externalEntityColumns,
			externalEntityColumnsWithDefault,
			externalEntityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(externalEntityType, externalEntityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(externalEntityType, externalEntityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `external_entities` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `external_entities` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `external_entities` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, externalEntityPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into external_entities")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == externalEntityMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for external_entities")
	}

CacheNoHooks:
	if !cached {
		externalEntityInsertCacheMut.Lock()
		externalEntityInsertCache[key] = cache
		externalEntityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExternalEntity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExternalEntity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	externalEntityUpdateCacheMut.RLock()
	cache, cached := externalEntityUpdateCache[key]
	externalEntityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			externalEntityColumns,
			externalEntityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update external_entities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `external_entities` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, externalEntityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(externalEntityType, externalEntityMapping, append(wl, externalEntityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update external_entities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for external_entities")
	}

	if !cached {
		externalEntityUpdateCacheMut.Lock()
		externalEntityUpdateCache[key] = cache
		externalEntityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q externalEntityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for external_entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for external_entities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExternalEntitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), externalEntityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `external_entities` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, externalEntityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in externalEntity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all externalEntity")
	}
	return rowsAff, nil
}

var mySQLExternalEntityUniqueColumns = []string{
	"id",
	"vendor_external_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExternalEntity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no external_entities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(externalEntityColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExternalEntityUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	externalEntityUpsertCacheMut.RLock()
	cache, cached := externalEntityUpsertCache[key]
	externalEntityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			externalEntityColumns,
			externalEntityColumnsWithDefault,
			externalEntityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			externalEntityColumns,
			externalEntityPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert external_entities, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "external_entities", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `external_entities` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(externalEntityType, externalEntityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(externalEntityType, externalEntityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for external_entities")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == externalEntityMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(externalEntityType, externalEntityMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for external_entities")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for external_entities")
	}

CacheNoHooks:
	if !cached {
		externalEntityUpsertCacheMut.Lock()
		externalEntityUpsertCache[key] = cache
		externalEntityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExternalEntity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExternalEntity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExternalEntity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), externalEntityPrimaryKeyMapping)
	sql := "DELETE FROM `external_entities` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from external_entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for external_entities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q externalEntityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no externalEntityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from external_entities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for external_entities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExternalEntitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExternalEntity slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(externalEntityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), externalEntityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `external_entities` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, externalEntityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from externalEntity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for external_entities")
	}

	if len(externalEntityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExternalEntity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExternalEntity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExternalEntitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExternalEntitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), externalEntityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `external_entities`.* FROM `external_entities` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, externalEntityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExternalEntitySlice")
	}

	*o = slice

	return nil
}

// ExternalEntityExists checks if the ExternalEntity row exists.
func ExternalEntityExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `external_entities` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if external_entities exists")
	}

	return exists, nil
}
