// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// StagePrediction is an object representing the database table.
type StagePrediction struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupCompetitionID int       `boil:"group_competition_id" json:"group_competition_id" toml:"group_competition_id" yaml:"group_competition_id"`
	CompetitionStageID int       `boil:"competition_stage_id" json:"competition_stage_id" toml:"competition_stage_id" yaml:"competition_stage_id"`
	UserID             int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TeamID             int       `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	Position           null.Int  `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	CreatedAt          null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *stagePredictionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stagePredictionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StagePredictionColumns = struct {
	ID                 string
	GroupCompetitionID string
	CompetitionStageID string
	UserID             string
	TeamID             string
	Position           string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	GroupCompetitionID: "group_competition_id",
	CompetitionStageID: "competition_stage_id",
	UserID:             "user_id",
	TeamID:             "team_id",
	Position:           "position",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

// Generated where

var StagePredictionWhere = struct {
	ID                 whereHelperint
	GroupCompetitionID whereHelperint
	CompetitionStageID whereHelperint
	UserID             whereHelperint
	TeamID             whereHelperint
	Position           whereHelpernull_Int
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: `id`},
	GroupCompetitionID: whereHelperint{field: `group_competition_id`},
	CompetitionStageID: whereHelperint{field: `competition_stage_id`},
	UserID:             whereHelperint{field: `user_id`},
	TeamID:             whereHelperint{field: `team_id`},
	Position:           whereHelpernull_Int{field: `position`},
	CreatedAt:          whereHelpernull_Time{field: `created_at`},
	UpdatedAt:          whereHelpernull_Time{field: `updated_at`},
}

// StagePredictionRels is where relationship names are stored.
var StagePredictionRels = struct {
}{}

// stagePredictionR is where relationships are stored.
type stagePredictionR struct {
}

// NewStruct creates a new relationship struct
func (*stagePredictionR) NewStruct() *stagePredictionR {
	return &stagePredictionR{}
}

// stagePredictionL is where Load methods for each relationship are stored.
type stagePredictionL struct{}

var (
	stagePredictionColumns               = []string{"id", "group_competition_id", "competition_stage_id", "user_id", "team_id", "position", "created_at", "updated_at"}
	stagePredictionColumnsWithoutDefault = []string{"group_competition_id", "competition_stage_id", "user_id", "team_id", "position", "created_at", "updated_at"}
	stagePredictionColumnsWithDefault    = []string{"id"}
	stagePredictionPrimaryKeyColumns     = []string{"id"}
)

type (
	// StagePredictionSlice is an alias for a slice of pointers to StagePrediction.
	// This should generally be used opposed to []StagePrediction.
	StagePredictionSlice []*StagePrediction
	// StagePredictionHook is the signature for custom StagePrediction hook methods
	StagePredictionHook func(context.Context, boil.ContextExecutor, *StagePrediction) error

	stagePredictionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stagePredictionType                 = reflect.TypeOf(&StagePrediction{})
	stagePredictionMapping              = queries.MakeStructMapping(stagePredictionType)
	stagePredictionPrimaryKeyMapping, _ = queries.BindMapping(stagePredictionType, stagePredictionMapping, stagePredictionPrimaryKeyColumns)
	stagePredictionInsertCacheMut       sync.RWMutex
	stagePredictionInsertCache          = make(map[string]insertCache)
	stagePredictionUpdateCacheMut       sync.RWMutex
	stagePredictionUpdateCache          = make(map[string]updateCache)
	stagePredictionUpsertCacheMut       sync.RWMutex
	stagePredictionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stagePredictionBeforeInsertHooks []StagePredictionHook
var stagePredictionBeforeUpdateHooks []StagePredictionHook
var stagePredictionBeforeDeleteHooks []StagePredictionHook
var stagePredictionBeforeUpsertHooks []StagePredictionHook

var stagePredictionAfterInsertHooks []StagePredictionHook
var stagePredictionAfterSelectHooks []StagePredictionHook
var stagePredictionAfterUpdateHooks []StagePredictionHook
var stagePredictionAfterDeleteHooks []StagePredictionHook
var stagePredictionAfterUpsertHooks []StagePredictionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StagePrediction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StagePrediction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StagePrediction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StagePrediction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StagePrediction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StagePrediction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StagePrediction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StagePrediction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StagePrediction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stagePredictionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStagePredictionHook registers your hook function for all future operations.
func AddStagePredictionHook(hookPoint boil.HookPoint, stagePredictionHook StagePredictionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		stagePredictionBeforeInsertHooks = append(stagePredictionBeforeInsertHooks, stagePredictionHook)
	case boil.BeforeUpdateHook:
		stagePredictionBeforeUpdateHooks = append(stagePredictionBeforeUpdateHooks, stagePredictionHook)
	case boil.BeforeDeleteHook:
		stagePredictionBeforeDeleteHooks = append(stagePredictionBeforeDeleteHooks, stagePredictionHook)
	case boil.BeforeUpsertHook:
		stagePredictionBeforeUpsertHooks = append(stagePredictionBeforeUpsertHooks, stagePredictionHook)
	case boil.AfterInsertHook:
		stagePredictionAfterInsertHooks = append(stagePredictionAfterInsertHooks, stagePredictionHook)
	case boil.AfterSelectHook:
		stagePredictionAfterSelectHooks = append(stagePredictionAfterSelectHooks, stagePredictionHook)
	case boil.AfterUpdateHook:
		stagePredictionAfterUpdateHooks = append(stagePredictionAfterUpdateHooks, stagePredictionHook)
	case boil.AfterDeleteHook:
		stagePredictionAfterDeleteHooks = append(stagePredictionAfterDeleteHooks, stagePredictionHook)
	case boil.AfterUpsertHook:
		stagePredictionAfterUpsertHooks = append(stagePredictionAfterUpsertHooks, stagePredictionHook)
	}
}

// One returns a single stagePrediction record from the query.
func (q stagePredictionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StagePrediction, error) {
	o := &StagePrediction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stage_predictions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StagePrediction records from the query.
func (q stagePredictionQuery) All(ctx context.Context, exec boil.ContextExecutor) (StagePredictionSlice, error) {
	var o []*StagePrediction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StagePrediction slice")
	}

	if len(stagePredictionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StagePrediction records in the query.
func (q stagePredictionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stage_predictions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stagePredictionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stage_predictions exists")
	}

	return count > 0, nil
}

// StagePredictions retrieves all the records using an executor.
func StagePredictions(mods ...qm.QueryMod) stagePredictionQuery {
	mods = append(mods, qm.From("`stage_predictions`"))
	return stagePredictionQuery{NewQuery(mods...)}
}

// FindStagePrediction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStagePrediction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StagePrediction, error) {
	stagePredictionObj := &StagePrediction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `stage_predictions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stagePredictionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stage_predictions")
	}

	return stagePredictionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StagePrediction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stage_predictions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stagePredictionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stagePredictionInsertCacheMut.RLock()
	cache, cached := stagePredictionInsertCache[key]
	stagePredictionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stagePredictionColumns,
			stagePredictionColumnsWithDefault,
			stagePredictionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stagePredictionType, stagePredictionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stagePredictionType, stagePredictionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `stage_predictions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `stage_predictions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `stage_predictions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, stagePredictionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stage_predictions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == stagePredictionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for stage_predictions")
	}

CacheNoHooks:
	if !cached {
		stagePredictionInsertCacheMut.Lock()
		stagePredictionInsertCache[key] = cache
		stagePredictionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StagePrediction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StagePrediction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stagePredictionUpdateCacheMut.RLock()
	cache, cached := stagePredictionUpdateCache[key]
	stagePredictionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stagePredictionColumns,
			stagePredictionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stage_predictions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `stage_predictions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, stagePredictionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stagePredictionType, stagePredictionMapping, append(wl, stagePredictionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stage_predictions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stage_predictions")
	}

	if !cached {
		stagePredictionUpdateCacheMut.Lock()
		stagePredictionUpdateCache[key] = cache
		stagePredictionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stagePredictionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stage_predictions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stage_predictions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StagePredictionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stagePredictionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `stage_predictions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stagePredictionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stagePrediction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stagePrediction")
	}
	return rowsAff, nil
}

var mySQLStagePredictionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StagePrediction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stage_predictions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stagePredictionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStagePredictionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stagePredictionUpsertCacheMut.RLock()
	cache, cached := stagePredictionUpsertCache[key]
	stagePredictionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stagePredictionColumns,
			stagePredictionColumnsWithDefault,
			stagePredictionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stagePredictionColumns,
			stagePredictionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert stage_predictions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "stage_predictions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `stage_predictions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(stagePredictionType, stagePredictionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stagePredictionType, stagePredictionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for stage_predictions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == stagePredictionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(stagePredictionType, stagePredictionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for stage_predictions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for stage_predictions")
	}

CacheNoHooks:
	if !cached {
		stagePredictionUpsertCacheMut.Lock()
		stagePredictionUpsertCache[key] = cache
		stagePredictionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StagePrediction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StagePrediction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StagePrediction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stagePredictionPrimaryKeyMapping)
	sql := "DELETE FROM `stage_predictions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stage_predictions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stage_predictions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stagePredictionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stagePredictionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stage_predictions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stage_predictions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StagePredictionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StagePrediction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(stagePredictionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stagePredictionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `stage_predictions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stagePredictionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stagePrediction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stage_predictions")
	}

	if len(stagePredictionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StagePrediction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStagePrediction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StagePredictionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StagePredictionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stagePredictionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `stage_predictions`.* FROM `stage_predictions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, stagePredictionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StagePredictionSlice")
	}

	*o = slice

	return nil
}

// StagePredictionExists checks if the StagePrediction row exists.
func StagePredictionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `stage_predictions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stage_predictions exists")
	}

	return exists, nil
}
