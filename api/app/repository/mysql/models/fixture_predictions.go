// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FixturePrediction is an object representing the database table.
type FixturePrediction struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupCompetitionID int       `boil:"group_competition_id" json:"group_competition_id" toml:"group_competition_id" yaml:"group_competition_id"`
	FixtureID          int       `boil:"fixture_id" json:"fixture_id" toml:"fixture_id" yaml:"fixture_id"`
	UserID             int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Direction          null.Int  `boil:"direction" json:"direction,omitempty" toml:"direction" yaml:"direction,omitempty"`
	HomeScore          null.Int  `boil:"home_score" json:"home_score,omitempty" toml:"home_score" yaml:"home_score,omitempty"`
	AwayScore          null.Int  `boil:"away_score" json:"away_score,omitempty" toml:"away_score" yaml:"away_score,omitempty"`
	CreatedAt          null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *fixturePredictionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fixturePredictionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FixturePredictionColumns = struct {
	ID                 string
	GroupCompetitionID string
	FixtureID          string
	UserID             string
	Direction          string
	HomeScore          string
	AwayScore          string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	GroupCompetitionID: "group_competition_id",
	FixtureID:          "fixture_id",
	UserID:             "user_id",
	Direction:          "direction",
	HomeScore:          "home_score",
	AwayScore:          "away_score",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

// Generated where

var FixturePredictionWhere = struct {
	ID                 whereHelperint
	GroupCompetitionID whereHelperint
	FixtureID          whereHelperint
	UserID             whereHelperint
	Direction          whereHelpernull_Int
	HomeScore          whereHelpernull_Int
	AwayScore          whereHelpernull_Int
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint{field: `id`},
	GroupCompetitionID: whereHelperint{field: `group_competition_id`},
	FixtureID:          whereHelperint{field: `fixture_id`},
	UserID:             whereHelperint{field: `user_id`},
	Direction:          whereHelpernull_Int{field: `direction`},
	HomeScore:          whereHelpernull_Int{field: `home_score`},
	AwayScore:          whereHelpernull_Int{field: `away_score`},
	CreatedAt:          whereHelpernull_Time{field: `created_at`},
	UpdatedAt:          whereHelpernull_Time{field: `updated_at`},
}

// FixturePredictionRels is where relationship names are stored.
var FixturePredictionRels = struct {
}{}

// fixturePredictionR is where relationships are stored.
type fixturePredictionR struct {
}

// NewStruct creates a new relationship struct
func (*fixturePredictionR) NewStruct() *fixturePredictionR {
	return &fixturePredictionR{}
}

// fixturePredictionL is where Load methods for each relationship are stored.
type fixturePredictionL struct{}

var (
	fixturePredictionColumns               = []string{"id", "group_competition_id", "fixture_id", "user_id", "direction", "home_score", "away_score", "created_at", "updated_at"}
	fixturePredictionColumnsWithoutDefault = []string{"group_competition_id", "fixture_id", "user_id", "direction", "home_score", "away_score", "created_at", "updated_at"}
	fixturePredictionColumnsWithDefault    = []string{"id"}
	fixturePredictionPrimaryKeyColumns     = []string{"id"}
)

type (
	// FixturePredictionSlice is an alias for a slice of pointers to FixturePrediction.
	// This should generally be used opposed to []FixturePrediction.
	FixturePredictionSlice []*FixturePrediction
	// FixturePredictionHook is the signature for custom FixturePrediction hook methods
	FixturePredictionHook func(context.Context, boil.ContextExecutor, *FixturePrediction) error

	fixturePredictionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fixturePredictionType                 = reflect.TypeOf(&FixturePrediction{})
	fixturePredictionMapping              = queries.MakeStructMapping(fixturePredictionType)
	fixturePredictionPrimaryKeyMapping, _ = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, fixturePredictionPrimaryKeyColumns)
	fixturePredictionInsertCacheMut       sync.RWMutex
	fixturePredictionInsertCache          = make(map[string]insertCache)
	fixturePredictionUpdateCacheMut       sync.RWMutex
	fixturePredictionUpdateCache          = make(map[string]updateCache)
	fixturePredictionUpsertCacheMut       sync.RWMutex
	fixturePredictionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fixturePredictionBeforeInsertHooks []FixturePredictionHook
var fixturePredictionBeforeUpdateHooks []FixturePredictionHook
var fixturePredictionBeforeDeleteHooks []FixturePredictionHook
var fixturePredictionBeforeUpsertHooks []FixturePredictionHook

var fixturePredictionAfterInsertHooks []FixturePredictionHook
var fixturePredictionAfterSelectHooks []FixturePredictionHook
var fixturePredictionAfterUpdateHooks []FixturePredictionHook
var fixturePredictionAfterDeleteHooks []FixturePredictionHook
var fixturePredictionAfterUpsertHooks []FixturePredictionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FixturePrediction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FixturePrediction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FixturePrediction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FixturePrediction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FixturePrediction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FixturePrediction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FixturePrediction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FixturePrediction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FixturePrediction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fixturePredictionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFixturePredictionHook registers your hook function for all future operations.
func AddFixturePredictionHook(hookPoint boil.HookPoint, fixturePredictionHook FixturePredictionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fixturePredictionBeforeInsertHooks = append(fixturePredictionBeforeInsertHooks, fixturePredictionHook)
	case boil.BeforeUpdateHook:
		fixturePredictionBeforeUpdateHooks = append(fixturePredictionBeforeUpdateHooks, fixturePredictionHook)
	case boil.BeforeDeleteHook:
		fixturePredictionBeforeDeleteHooks = append(fixturePredictionBeforeDeleteHooks, fixturePredictionHook)
	case boil.BeforeUpsertHook:
		fixturePredictionBeforeUpsertHooks = append(fixturePredictionBeforeUpsertHooks, fixturePredictionHook)
	case boil.AfterInsertHook:
		fixturePredictionAfterInsertHooks = append(fixturePredictionAfterInsertHooks, fixturePredictionHook)
	case boil.AfterSelectHook:
		fixturePredictionAfterSelectHooks = append(fixturePredictionAfterSelectHooks, fixturePredictionHook)
	case boil.AfterUpdateHook:
		fixturePredictionAfterUpdateHooks = append(fixturePredictionAfterUpdateHooks, fixturePredictionHook)
	case boil.AfterDeleteHook:
		fixturePredictionAfterDeleteHooks = append(fixturePredictionAfterDeleteHooks, fixturePredictionHook)
	case boil.AfterUpsertHook:
		fixturePredictionAfterUpsertHooks = append(fixturePredictionAfterUpsertHooks, fixturePredictionHook)
	}
}

// One returns a single fixturePrediction record from the query.
func (q fixturePredictionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FixturePrediction, error) {
	o := &FixturePrediction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fixture_predictions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FixturePrediction records from the query.
func (q fixturePredictionQuery) All(ctx context.Context, exec boil.ContextExecutor) (FixturePredictionSlice, error) {
	var o []*FixturePrediction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FixturePrediction slice")
	}

	if len(fixturePredictionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FixturePrediction records in the query.
func (q fixturePredictionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fixture_predictions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fixturePredictionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fixture_predictions exists")
	}

	return count > 0, nil
}

// FixturePredictions retrieves all the records using an executor.
func FixturePredictions(mods ...qm.QueryMod) fixturePredictionQuery {
	mods = append(mods, qm.From("`fixture_predictions`"))
	return fixturePredictionQuery{NewQuery(mods...)}
}

// FindFixturePrediction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFixturePrediction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FixturePrediction, error) {
	fixturePredictionObj := &FixturePrediction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `fixture_predictions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fixturePredictionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fixture_predictions")
	}

	return fixturePredictionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FixturePrediction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fixture_predictions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fixturePredictionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fixturePredictionInsertCacheMut.RLock()
	cache, cached := fixturePredictionInsertCache[key]
	fixturePredictionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fixturePredictionColumns,
			fixturePredictionColumnsWithDefault,
			fixturePredictionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `fixture_predictions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `fixture_predictions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `fixture_predictions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, fixturePredictionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fixture_predictions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fixturePredictionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for fixture_predictions")
	}

CacheNoHooks:
	if !cached {
		fixturePredictionInsertCacheMut.Lock()
		fixturePredictionInsertCache[key] = cache
		fixturePredictionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FixturePrediction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FixturePrediction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fixturePredictionUpdateCacheMut.RLock()
	cache, cached := fixturePredictionUpdateCache[key]
	fixturePredictionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fixturePredictionColumns,
			fixturePredictionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fixture_predictions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `fixture_predictions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, fixturePredictionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, append(wl, fixturePredictionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fixture_predictions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fixture_predictions")
	}

	if !cached {
		fixturePredictionUpdateCacheMut.Lock()
		fixturePredictionUpdateCache[key] = cache
		fixturePredictionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fixturePredictionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fixture_predictions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fixture_predictions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FixturePredictionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fixturePredictionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `fixture_predictions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fixturePredictionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fixturePrediction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fixturePrediction")
	}
	return rowsAff, nil
}

var mySQLFixturePredictionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FixturePrediction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fixture_predictions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fixturePredictionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFixturePredictionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fixturePredictionUpsertCacheMut.RLock()
	cache, cached := fixturePredictionUpsertCache[key]
	fixturePredictionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fixturePredictionColumns,
			fixturePredictionColumnsWithDefault,
			fixturePredictionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fixturePredictionColumns,
			fixturePredictionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert fixture_predictions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "fixture_predictions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `fixture_predictions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for fixture_predictions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == fixturePredictionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(fixturePredictionType, fixturePredictionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for fixture_predictions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for fixture_predictions")
	}

CacheNoHooks:
	if !cached {
		fixturePredictionUpsertCacheMut.Lock()
		fixturePredictionUpsertCache[key] = cache
		fixturePredictionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FixturePrediction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FixturePrediction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FixturePrediction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fixturePredictionPrimaryKeyMapping)
	sql := "DELETE FROM `fixture_predictions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fixture_predictions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fixture_predictions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fixturePredictionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fixturePredictionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fixture_predictions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fixture_predictions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FixturePredictionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FixturePrediction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(fixturePredictionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fixturePredictionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `fixture_predictions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fixturePredictionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fixturePrediction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fixture_predictions")
	}

	if len(fixturePredictionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FixturePrediction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFixturePrediction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FixturePredictionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FixturePredictionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fixturePredictionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `fixture_predictions`.* FROM `fixture_predictions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, fixturePredictionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FixturePredictionSlice")
	}

	*o = slice

	return nil
}

// FixturePredictionExists checks if the FixturePrediction row exists.
func FixturePredictionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `fixture_predictions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fixture_predictions exists")
	}

	return exists, nil
}
